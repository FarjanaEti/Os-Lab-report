*******Source code*****
#include <stdio.h>

// Structure to hold process details
typedef struct {
    int pid;            
    int burst_time;     
    int waiting_time;   
    int turnaround_time;
    int arrival_time;  
} Process;

// Function to calculate waiting and turnaround times
void calculateTimes(Process p[], int n) {
    p[0].waiting_time = 0; // First process has no waiting time
    p[0].turnaround_time = p[0].burst_time; // Turnaround time is equal to burst time

    for (int i = 1; i < n; i++) {
        // Waiting time is the cumulative burst time of all previous processes
        p[i].waiting_time = p[i - 1].waiting_time + p[i - 1].burst_time;
        // Turnaround time is the sum of waiting time and burst time
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time;
    }
}

// Function to display process details
void displayProcesses(Process p[], int n) {
    float total_wt = 0, total_tat = 0;
    printf("\nProcess ID  Arrival Time  Burst Time  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += p[i].waiting_time; // Sum of waiting times
        total_tat += p[i].turnaround_time; // Sum of turnaround times
        printf("%5d %12d %12d %12d %16d\n",
            p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }
    // Calculating and displaying average waiting and turnaround times
    printf("\nAverage Waiting Time: %.2f", total_wt / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n); // Taking input for number of processes

    Process p[n];
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1; // Assigning process ID
        printf("Process %d - Arrival Time: ", p[i].pid);
        scanf("%d", &p[i].arrival_time); // Taking arrival time as input
        printf("Process %d - Burst Time: ", p[i].pid);
        scanf("%d", &p[i].burst_time); // Taking burst time as input
    }

    calculateTimes(p, n); // Calculating waiting and turnaround times
    displayProcesses(p, n); // Displaying the results

    return 0;
}

*******Output********
Enter the number of processes: 4
Enter arrival time and burst time for each process:
Process 1 - Arrival Time: 1
Process 1 - Burst Time: 3
Process 2 - Arrival Time: 2
Process 2 - Burst Time: 5
Process 3 - Arrival Time: 3
Process 3 - Burst Time: 2
Process 4 - Arrival Time: 4
Process 4 - Burst Time: 3

Process ID  Arrival Time  Burst Time  Waiting Time  Turnaround Time
    1            1            3            0                3
    2            2            5            3                8
    3            3            2            8               10
    4            4            3           10               13

Average Waiting Time: 5.25
Average Turnaround Time: 8.50


//Without Arrival time
#include <stdio.h>

struct Process {
    int pid;          // Process ID
    int burstTime;    // Burst Time
    int waitingTime;
    int turnaroundTime;
    int completionTime;
    int isCompleted;  // Flag to check if process is completed
};

// Function to find the next process to be executed
int findNextProcess(struct Process proc[], int n) {
    int index = -1;
    int shortestBurstTime = 100000;  // Set to a large number

    for (int i = 0; i < n; i++) {
        if (proc[i].isCompleted == 0 && proc[i].burstTime < shortestBurstTime) {
            shortestBurstTime = proc[i].burstTime;
            index = i;
        }
    }
    return index;
}

// Function to calculate waiting time and turnaround time
void calculateTimes(struct Process proc[], int n) {
    int currentTime = 0;
    int completed = 0;

    while (completed < n) {
        int index = findNextProcess(proc, n);

        if (index != -1) {
            proc[index].completionTime = currentTime + proc[index].burstTime;
            proc[index].turnaroundTime = proc[index].completionTime;
            proc[index].waitingTime = proc[index].turnaroundTime - proc[index].burstTime;
            proc[index].isCompleted = 1;
            completed++;
            currentTime = proc[index].completionTime;
        }
    }
}

void printProcessDetails(struct Process proc[], int n) {
    float totalWaitingTime = 0, totalTurnaroundTime = 0;

    printf("\nPID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burstTime, proc[i].waitingTime, proc[i].turnaroundTime);
        totalWaitingTime += proc[i].waitingTime;
        totalTurnaroundTime += proc[i].turnaroundTime;
    }

    printf("\nAverage Waiting Time: %.2f", totalWaitingTime / n);
    printf("\nAverage Turnaround Time: %.2f\n", totalTurnaroundTime / n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("\nEnter details for process %d\n", i + 1);
        proc[i].pid = i + 1;
        printf("Burst Time: ");
        scanf("%d", &proc[i].burstTime);
        proc[i].isCompleted = 0;
    }

    // Calculate waiting and turnaround times
    calculateTimes(proc, n);

    // Print process details
    printProcessDetails(proc, n);

    return 0;
}

